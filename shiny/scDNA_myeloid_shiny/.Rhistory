width = plotWidth())
})
}
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
library(shinydashboard)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(cowplot)
if(interactive())
# Set working directory to shiny folder from git
#setwd("/Users/bowmanr/Projects/scDNA/scDNA_myeloid/shiny")
# SAMPLE CLONALITY DATA ====
#test<-read.csv("data/for_NB.csv")
#test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
# UI ====
ui <- dashboardPage(
dashboardHeader(title = "AML Mutational Profiling"),
#get MSK logo?
#dashboardHeader(title = tags$a(href="https://www.mskcc.org",
#tags$img(src="logo.png"))),*
dashboardSidebar(
sidebarMenu(
menuItem("Paper", icon = icon("file-code-o"),
href = "https://www.biorxiv.org/content/10.1101/2020.02.07.938860v1"),
menuItem("Tutorial", icon = icon("file-code-o"),
href = "https://bowmanr.github.io/scDNA_myeloid/"),
menuItem("3.1.4 Sample Clonality", tabName = "sampleclonality", icon = icon("arrow-right")), #icon = icon("arrow-right"), color="blue"),
menuItem("3.1.5 Clonograph", tabName = "clonograph", icon = icon("arrow-right")) #icon = icon("arrow-right"), color="blue")
)
),
dashboardBody(
#customize header + navbar to be exactly MSK's color
tags$head(tags$style(HTML('
.skin-blue .main-header .logo {
background-color: #0c6cc4;
}
.skin-blue .main-header .logo:hover {
background-color: #0c6cc4;
}
.skin-blue .main-header .navbar {
background-color: #0c6cc4;
}
'))),
tabItems(
tabItem(tabName = "sampleclonality",
fluidRow(
box(
width = 3,
radioButtons("sc", "Sample Clonality Graphs:",
c("Figure 1C" = "oneC",
"Figure 1E" = "oneE",
"Figure 2A" = "twoA",
"Figure 2B" = "twoB",
"Figure 3A" = "threeA"
)),
),
box(width=6,
plotOutput("sampleClonPlot"))
)
),
tabItem(tabName = "clonograph",
fluidRow(
column(
width = 4,
selectInput("clonoInput", "Sample Names:", names(sample_list),multiple = TRUE,selected="MSK45")
)
),
fluidRow(
column(width=6,
uiOutput("plot.ui")#,
#  plotOutput("clonalBarplot")
))
)
)
)
)
# SERVER ====
server <- function(input, output) {
test<-read.csv("data/for_NB.csv")
test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
# Number of mutations
gg_number_of_mutations<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations),
sd = sd(Number_of_mutations),
sem = sd(Number_of_mutations)/
sqrt(length(Number_of_mutations))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,9), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Number of clones
gg_number_of_clones<-ggplot(test,aes(y=Number_of_clones,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Number of clones")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Shannon diversity index
gg_shannon<-ggplot(test,aes(y=Shannon,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Shannon diveristy index")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Number of mutations in each cohort
gg_Number_of_mutations_in_Dclone<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations_in_dominant_clone),
sd = sd(Number_of_mutations_in_dominant_clone),
sem = sd(Number_of_mutations_in_dominant_clone)/
sqrt(length(Number_of_mutations_in_dominant_clone))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations \n in dominant clone")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,4.5), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",
aesthetics = "fill",guide=FALSE)
# Dominant clone size
gg_dominant_clone_size<-ggplot(test,
aes(y=Dominant_clone_size,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Fraction of sample \n in dominant clone")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# CLONOGRAPH DATA ====
final_sample_summary<-readRDS(file="data/final_sample_summary.rds")
#sample <-input$clonoInput
sample_list <-final_sample_summary
# Generate clonal abundance barplot
gg_clonograph <- function(sample) {
# Extract out the sample of interest
clonal_abundance <-sample_list[[sample]]$Clones
clonal_architecture <-sample_list[[sample]]$Architecture
# Ensure the order of the clone abundance and clone architecture are the same.
clonal_architecture$Clone <- factor(clonal_architecture$Clone, levels=rev(clonal_abundance$Clone))
clonal_abundance$Clone <- factor(clonal_abundance$Clone, levels=levels(clonal_architecture$Clone))
gg_clonal_barplot<-ggplot(data=clonal_abundance, aes(x=Clone, y=Count,fill=Count)) +
geom_col()+
ggtitle(sample)+
theme_classic(base_size=12)+
scale_y_continuous(expand=c(0.01,0))+
#ylim() +
ylab("Cell Count")+
geom_errorbar(aes(ymin = LCI, ymax = UCI), width = 0.2)+
scale_fill_distiller(name = "Value", palette = "Reds", direction = 1) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x =element_blank(),
legend.position = "none",
plot.title = element_text(hjust=0.5,size=16),
plot.margin=unit(c(0,0,0,0),"cm"))
gg_heatmap<-ggplot(data=clonal_architecture,
aes(x=Clone, y=Mutant, fill=Genotype))+
geom_tile() +
scale_fill_manual(values=c("WT"=brewer.pal(7,"Reds")[1],
"Heterozygous"=brewer.pal(7,"Reds")[3],
"Homozygous"=brewer.pal(7,"Reds")[6],
"Unknown"="grey50"),name="Genotype")+
theme_classic(base_size=12) +
ylab("Mutation")+
scale_y_discrete(limits = rev(levels(clonal_architecture$Mutant)))+
theme(legend.position = "right", legend.direction = "vertical",
axis.text.x = element_blank(),
axis.line=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
plot.margin=unit(c(0,0,0,0),"cm"))
return(plot_grid(gg_clonal_barplot,gg_heatmap,ncol=1,align="v",axis="lr",rel_heights=c(1,0.75)))
}
gg_clonograph_multiplot<-function(sample){
graphs <- lapply(sample,gg_clonograph)
grobs <- lapply(graphs,as_grob)
return(plot_grid(plotlist = grobs,ncol=2,align="v",axis="lr"))
}
plotCount <- reactive({
as.numeric(length(input$clonoInput))
})
plotHeight <- reactive({ifelse(plotCount()==1,400,400 * round(plotCount()/2))})
plotWidth  <- reactive({ifelse(plotCount()==1,500,1000)})
output$sampleClonPlot <- renderPlot(switch(input$sc, oneC = gg_number_of_mutations,
oneE = gg_number_of_clones,
twoA = gg_shannon,
twoB = gg_Number_of_mutations_in_Dclone,
threeA = gg_dominant_clone_size
))
output$clonalBarplot <- renderPlot(  if(plotCount()==1){
gg_clonograph(input$clonoInput)
} else if(plotCount()>1&plotCount()<7){
gg_clonograph_multiplot(input$clonoInput)
}
)
output$plot.ui <- renderUI({
plotOutput("clonalBarplot", height = plotHeight(),
width = plotWidth())
})
}
shinyApp(ui, server)
#install.packages("shiny")
library(shiny)
library(shinydashboard)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(cowplot)
if(interactive())
# Set working directory to shiny folder from git
#setwd("/Users/bowmanr/Projects/scDNA/scDNA_myeloid/shiny")
# SAMPLE CLONALITY DATA ====
#test<-read.csv("data/for_NB.csv")
#test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
# UI ====
ui <- dashboardPage(
dashboardHeader(title = "AML Mutational Profiling"),
#get MSK logo?
#dashboardHeader(title = tags$a(href="https://www.mskcc.org",
#tags$img(src="logo.png"))),*
dashboardSidebar(
sidebarMenu(
menuItem("Paper", icon = icon("file-code-o"),
href = "https://www.biorxiv.org/content/10.1101/2020.02.07.938860v1"),
menuItem("Tutorial", icon = icon("file-code-o"),
href = "https://bowmanr.github.io/scDNA_myeloid/"),
menuItem("3.1.4 Sample Clonality", tabName = "sampleclonality", icon = icon("arrow-right")), #icon = icon("arrow-right"), color="blue"),
menuItem("3.1.5 Clonograph", tabName = "clonograph", icon = icon("arrow-right")) #icon = icon("arrow-right"), color="blue")
)
),
dashboardBody(
#customize header + navbar to be exactly MSK's color
tags$head(tags$style(HTML('
.skin-blue .main-header .logo {
background-color: #0c6cc4;
}
.skin-blue .main-header .logo:hover {
background-color: #0c6cc4;
}
.skin-blue .main-header .navbar {
background-color: #0c6cc4;
}
'))),
tabItems(
tabItem(tabName = "sampleclonality",
fluidRow(
box(
width = 3,
radioButtons("sc", "Sample Clonality Graphs:",
c("Figure 1C" = "oneC",
"Figure 1E" = "oneE",
"Figure 2A" = "twoA",
"Figure 2B" = "twoB",
"Figure 3A" = "threeA"
)),
),
box(width=6,
plotOutput("sampleClonPlot"))
)
),
tabItem(tabName = "clonograph",
fluidRow(
column(
width = 4,
selectInput("clonoInput", "Sample Names:", names(sample_list),multiple = TRUE,selected="MSK45")
)
),
fluidRow(
column(width=6,
uiOutput("plot.ui")#,
#  plotOutput("clonalBarplot")
))
)
)
)
)
# SERVER ====
server <- function(input, output) {
test<-read.csv("data/for_NB.csv")
test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
# Number of mutations
gg_number_of_mutations<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations),
sd = sd(Number_of_mutations),
sem = sd(Number_of_mutations)/
sqrt(length(Number_of_mutations))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,9), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Number of clones
gg_number_of_clones<-ggplot(test,aes(y=Number_of_clones,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Number of clones")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Shannon diversity index
gg_shannon<-ggplot(test,aes(y=Shannon,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Shannon diveristy index")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Number of mutations in each cohort
gg_Number_of_mutations_in_Dclone<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations_in_dominant_clone),
sd = sd(Number_of_mutations_in_dominant_clone),
sem = sd(Number_of_mutations_in_dominant_clone)/
sqrt(length(Number_of_mutations_in_dominant_clone))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations \n in dominant clone")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,4.5), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",
aesthetics = "fill",guide=FALSE)
# Dominant clone size
gg_dominant_clone_size<-ggplot(test,
aes(y=Dominant_clone_size,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Fraction of sample \n in dominant clone")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# CLONOGRAPH DATA ====
final_sample_summary<-readRDS(file="data/final_sample_summary.rds")
#sample <-input$clonoInput
sample_list <-final_sample_summary
# Generate clonal abundance barplot
gg_clonograph <- function(sample) {
# Extract out the sample of interest
clonal_abundance <-sample_list[[sample]]$Clones
clonal_architecture <-sample_list[[sample]]$Architecture
# Ensure the order of the clone abundance and clone architecture are the same.
clonal_architecture$Clone <- factor(clonal_architecture$Clone, levels=rev(clonal_abundance$Clone))
clonal_abundance$Clone <- factor(clonal_abundance$Clone, levels=levels(clonal_architecture$Clone))
gg_clonal_barplot<-ggplot(data=clonal_abundance, aes(x=Clone, y=Count,fill=Count)) +
geom_col()+
ggtitle(sample)+
theme_classic(base_size=12)+
scale_y_continuous(expand=c(0.01,0))+
#ylim() +
ylab("Cell Count")+
geom_errorbar(aes(ymin = LCI, ymax = UCI), width = 0.2)+
scale_fill_distiller(name = "Value", palette = "Reds", direction = 1) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x =element_blank(),
legend.position = "none",
plot.title = element_text(hjust=0.5,size=16),
plot.margin=unit(c(0,0,0,0),"cm"))
gg_heatmap<-ggplot(data=clonal_architecture,
aes(x=Clone, y=Mutant, fill=Genotype))+
geom_tile() +
scale_fill_manual(values=c("WT"=brewer.pal(7,"Reds")[1],
"Heterozygous"=brewer.pal(7,"Reds")[3],
"Homozygous"=brewer.pal(7,"Reds")[6],
"Unknown"="grey50"),name="Genotype")+
theme_classic(base_size=12) +
ylab("Mutation")+
scale_y_discrete(limits = rev(levels(clonal_architecture$Mutant)))+
theme(legend.position = "right", legend.direction = "vertical",
axis.text.x = element_blank(),
axis.line=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
plot.margin=unit(c(0,0,0,0),"cm"))
return(plot_grid(gg_clonal_barplot,gg_heatmap,ncol=1,align="v",axis="lr",rel_heights=c(1,0.75)))
}
gg_clonograph_multiplot<-function(sample){
graphs <- lapply(sample,gg_clonograph)
grobs <- lapply(graphs,as_grob)
return(plot_grid(plotlist = grobs,ncol=2,align="v",axis="lr"))
}
plotCount <- reactive({
as.numeric(length(input$clonoInput))
})
plotHeight <- reactive({ifelse(plotCount()==1,400,400 * round(plotCount()/2))})
plotWidth  <- reactive({ifelse(plotCount()==1,500,1000)})
output$sampleClonPlot <- renderPlot(switch(input$sc, oneC = gg_number_of_mutations,
oneE = gg_number_of_clones,
twoA = gg_shannon,
twoB = gg_Number_of_mutations_in_Dclone,
threeA = gg_dominant_clone_size
))
output$clonalBarplot <- renderPlot(  if(plotCount()==1){
gg_clonograph(input$clonoInput)
} else if(plotCount()>1&plotCount()<7){
gg_clonograph_multiplot(input$clonoInput)
}
)
output$plot.ui <- renderUI({
plotOutput("clonalBarplot", height = plotHeight(),
width = plotWidth())
})
}
shinyApp(ui, server)
runApp('scDNA_myeloid')
runApp('scDNA_myeloid')
if(interactive())
deployApp()
getwd()
deployApp("scDNA_myeloid/")
head(test)
if(interactive())
test<-read.csv("data/for_NB.csv")
test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
# Set working directory to shiny folder from git
setwd("/Users/bowmanr/Projects/scDNA/scDNA_myeloid/shiny/scDNA_myeloid/")
# SAMPLE CLONALITY DATA ====
test<-read.csv("data/for_NB.csv")
test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
test
test$Final_group
colnames(test)
gg_number_of_mutations+aes(x=Group)
# Number of mutations
gg_number_of_mutations<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations),
sd = sd(Number_of_mutations),
sem = sd(Number_of_mutations)/
sqrt(length(Number_of_mutations))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,9), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
gg_number_of_mutations+aes(x=Group)
gg_number_of_mutations+aes(x=test$Group)
gg_dominant_clone_size$x
gg_number_of_mutations$x
gg_number_of_mutations$mapping
gg_number_of_mutations$mapping$x
gg_number_of_mutations$mapping$x <- "Group"
gg_number_of_mutations$mapping$x
gg_number_of_mutations
gg_number_of_mutations$mapping$x$expr <- "^Group"
gg_number_of_mutations
# Number of mutations
gg_number_of_mutations<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations),
sd = sd(Number_of_mutations),
sem = sd(Number_of_mutations)/
sqrt(length(Number_of_mutations))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,9), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
gg_number_of_mutations$mapping$x$expr <- "^Group"
# Number of mutations
gg_number_of_mutations<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations),
sd = sd(Number_of_mutations),
sem = sd(Number_of_mutations)/
sqrt(length(Number_of_mutations))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,9), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
gg_number_of_mutations$mapping$x$expr <- "^Group"
gg_number_of_mutations
gg_number_of_mutations$mapping$x$expr <- "^Dx"
gg_number_of_mutations
gg_number_of_mutations$mapping$x
gg_number_of_mutations$mapping$x$expr
gg_number_of_mutations$mapping$x
gg_number_of_mutations+geom_bar(aes(x=Group))
gg_number_of_mutations+geom_bar(aes(x=Group),data=test)
shiny::runApp()
shiny::runApp()
