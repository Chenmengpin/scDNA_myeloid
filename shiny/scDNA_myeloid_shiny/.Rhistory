if(length(storage_results)==0){
return(NULL)
}
storage_results<-lapply(storage_results,function(x){x[1:which.max(x$cumulative_reward),]})
final<-do.call(rbind,storage_results)[,c(1,4,3)]
nodes_to_remove <- setdiff(setdiff(final$nextState,final$states),final_sample_summary[[sample]]$Clones$Clone)
final <- final%>%filter(!nextState%in%nodes_to_remove)
nodes_to_remove <- setdiff(setdiff(final$nextState,final$states),final_sample_summary[[sample]]$Clones$Clone)
final <- final%>%filter(!nextState%in%nodes_to_remove)
final[!duplicated(final),]
})
all_results_filtered<-plyr::compact(all_results_filtered)#[is.null(all_results_filtered)]<-NULL
all_results_filtered<-setNames(lapply(names(all_results_filtered),function(x){
data.frame(all_results_filtered[[x]],
"mutation"=x,
"edge"=paste(all_results_filtered[[x]]$states,all_results_filtered[[x]]$nextState,sep="->"))
}),names(all_results_filtered))
final<-do.call(rbind,all_results_filtered)
if(length(final)==0){
return("exclude")
} else {
final%>%group_by(mutation)%>%distinct(nextState,reward)%>%summarize(total=sum(reward))
}
})
favorite_genes <- c("ASXL1","DNMT3A","TET2","IDH1","IDH2","NPM1","KRAS","NRAS","PTPN11","FLT3","JAK2")
out_mat<-data.frame(do.call(rbind,output))%>%filter(mutation!="exclude")
out_mat$Gene <- do.call(rbind,strsplit(out_mat$mutation,split="[_\\.]"))[,1]
out_mat<- out_mat%>%filter(Gene%in%favorite_genes)
out_mat$total <- as.numeric(out_mat$total)
gene_order <- out_mat%>%group_by(Gene)%>%summarize(median=median(total))%>%arrange(median)%>%pull(Gene)
out_mat$Gene <- factor(out_mat$Gene,levels=(gene_order))
dim(out)
dim(out_mat)
head(out_mat)
head(output)
length(output)
source("/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Scripts/mBio_processing_scripts.R")
setwd("/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/July/")
final_sample_summary<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/final_sample_summary.rds")
clonal_sample_set_after_boostrap<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/clonal_sample_set_after_boostrap")
graph_results<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/MDP_results.rds")
final_results<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/MDP_trajectory_for_each_gene.rds")
out<-do.call(rbind,list(gene_pair_summmary(A="DNMT3A",B="IDH1"),
#gene_pair_summmary(A="DNMT3A",B="IDH2"),
gene_pair_summmary(A="NPM1",B="FLT3"),
gene_pair_summmary(A="NPM1",B="NRAS")))
out$Clone <- gsub("mutant","\n mutant",out$Clone)
out$Clone<- factor(out$Clone,levels=c("DNMT3A","NPM1","Double \n mutant","FLT3","NRAS","IDH1","IDH2"))
dim(out)
source("/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Scripts/mBio_processing_scripts.R")
setwd("/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/July/")
final_sample_summary<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/final_sample_summary.rds")
clonal_sample_set_after_boostrap<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/clonal_sample_set_after_boostrap")
graph_results<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/MDP_results.rds")
final_results<-readRDS(file="/Volumes/LevineLab/Levine Lab/Bobby/Collaborations/MissionBio/Analysis/2020/January/MDP_trajectory_for_each_gene.rds")
out<-do.call(rbind,list(gene_pair_summmary(A="DNMT3A",B="IDH1"),
#gene_pair_summmary(A="DNMT3A",B="IDH2"),
gene_pair_summmary(A="NPM1",B="FLT3"),
gene_pair_summmary(A="NPM1",B="NRAS")))
out$Clone <- gsub("mutant","\n mutant",out$Clone)
out$Clone<- factor(out$Clone,levels=c("DNMT3A","NPM1","Double \n mutant","FLT3","NRAS","IDH1","IDH2"))
colors_set <- c("Double \n mutant"="black",
"DNMT3A"=brewer.pal(5,"Blues")[5],
"NPM1"=brewer.pal(5,"Blues")[5],
"IDH1"=brewer.pal(5,"Reds")[5],
"IDH2"=brewer.pal(5,"Reds")[5],
"FLT3"=brewer.pal(5,"Reds")[5],
"NRAS"=brewer.pal(5,"Reds")[5])
ggA<-ggplot(out%>%filter(!is.na(Size)),aes(x=Clone,y=Size/100,group=Group2))+
geom_point(aes(fill=Clone), size=2, shape=21, stroke=0) +
geom_line(aes(color=Gene))+facet_grid(~Gene_pair,scale="free_x")+
scale_fill_manual(values=colors_set,guide=FALSE) +
scale_colour_manual(values=colors_set,guide=FALSE) +
theme_bw(base_size=6)+
theme(plot.title = element_text(hjust=0.5),
strip.background = element_blank()
)+
ylab("Fraction of sample \n in mutant clone")+
xlab("")#+
ggsave(ggA, width=8,height=3.6,units="cm",
file="./Figures/F3D-convergent_evolution shorter.pdf")
gene_pair_summmary<- function(A,B){
double_mutant_samples<-names(graph_results)[do.call(c,lapply(names(graph_results),function(x){
sample <- graph_results[[x]]
any(grepl(A,unique(sample$Action)))&any(grepl(B,unique(sample$Action)))
}))]
double_mutant_order<-setNames(lapply(double_mutant_samples,function(x){
print(x)
sample <- final_sample_summary[[x]]
mutations <- colnames(sample$NGT)
clones<- sample$Clone
A_het_clones <-sample$Architecture%>%filter(Genotype=="Heterozygous")%>%filter(grepl(A,Mutant))%>%distinct(Clone)%>%pull(Clone)
B_het_clones <-sample$Architecture%>%filter(Genotype=="Heterozygous")%>%filter(grepl(B,Mutant))%>%distinct(Clone)%>%pull(Clone)
AB_het_clones<-intersect(A_het_clones,B_het_clones)
AB_clone_sizes <- graph_results[[x]]%>%filter(NextState%in%AB_het_clones)%>%filter(grepl(A,Action)|grepl(B,Action))%>%filter(Reward==max(Reward))%>%distinct(Reward)%>%pull(Reward)
antecdenent_options<-graph_results[[x]]%>%filter(NextState%in%AB_het_clones)%>%filter(grepl(A,Action)|grepl(B,Action))%>%filter(Reward==max(Reward))
antecendent_clones<-graph_results[[x]]%>%filter(NextState%in%antecdenent_options$State)%>%filter(Reward!=0)
set<-setNames(merge(antecdenent_options[,1:4],antecendent_clones[,3:4],by.x="State",by.y="NextState"),
c("Antecedent","Mutation","Max_het_state","Max_het_size","Antecednet_size"))
Mut_A <- set%>%filter(grepl(A,set$Mutation))%>%distinct(Mutation,Antecednet_size)%>%filter(Antecednet_size==max(Antecednet_size))%>%pull(Mutation)
Mut_B <- set%>%filter(grepl(B,set$Mutation))%>%distinct(Mutation,Antecednet_size)%>%filter(Antecednet_size==max(Antecednet_size))%>%pull(Mutation)
set <- set%>%filter(Mutation%in%c(Mut_A,Mut_B))
convergence <- ifelse((any(grepl(A,set$Mutation)) &any(grepl(B,set$Mutation))),"Yes","No")
print(convergence)
if(convergence=="Yes"){
sizes <- setNames(data.frame("Double_mutant"=unique(set$Max_het_size),
B=unique(set%>%filter(grepl(A,set$Mutation))%>%pull(Antecednet_size)),
A=unique(set%>%filter(grepl(B,set$Mutation))%>%pull(Antecednet_size))),
c("Double_mutant",B,A))
} else if(any(grepl(B,set$Mutation))) {
sizes <- setNames(data.frame("Double_mutant"=unique(set$Max_het_size),
A=unique(set%>%filter(grepl(B,set$Mutation))%>%pull(Antecednet_size))),
c("Double_mutant",A))
} else if(any(grepl(A,set$Mutation))) {
sizes <- setNames(data.frame("Double_mutant"=unique(set$Max_het_size),
B=unique(set%>%filter(grepl(A,set$Mutation))%>%pull(Antecednet_size))),
c("Double_mutant",B))
} else if(nrow(set)<1){
return(data.frame("Double_mutant"=0))
}
return(sizes)
}),double_mutant_samples)
double_mutant_order_mat<-plyr::rbind.fill(setNames(lapply(double_mutant_order,function(x){data.frame(x)}),c(double_mutant_samples)))
rownames(double_mutant_order_mat) <-    double_mutant_samples
double_mutant_order_mat$Sample <- double_mutant_samples
double_mutant_order_mat<- double_mutant_order_mat%>%filter(!Double_mutant==0)
double_mutant_order_mat$Convergence <- ifelse((!is.na(double_mutant_order_mat[,A])&!is.na(double_mutant_order_mat[,B]))&
double_mutant_order_mat[,A]>0&
double_mutant_order_mat[,B]>0,"Convergent",
ifelse(is.na(double_mutant_order_mat[,A])&double_mutant_order_mat[,B]>0,B,A))
melted_set <-setNames(melt(double_mutant_order_mat),c("Sample","Convergence","Clone","Size"))
melted_set$Clone <-factor(melted_set$Clone,levels=c(A,"Double_mutant",B))
melted_set$Clone <-plyr::revalue(melted_set$Clone,c("Double_mutant"="Double mutant"))
melted_set$Convergence <-factor(melted_set$Convergence,levels=c("Convergent",A,B))
gene_name_A <- melted_set%>%filter(Convergence==A)
colors_set <- c("black",
brewer.pal(5,"Blues")[5],
brewer.pal(5,"Reds")[5])
names(colors_set) <- c("Double mutant",A,B)
alpha_set <- c(0.5,1,1)
names(alpha_set) <- names(colors_set)
melted_set$Mutation_status <- factor(ifelse(melted_set$Clone=="Double mutant","Double mutant","Single Mutant"),levels=c("Single Mutant","Double mutant"))
melted_set_x<-rbind(melted_set%>%filter(Mutation_status=="Double mutant"),melted_set)
samples <- tally(melted_set%>%distinct(Sample))%>%pull(n)
melted_set_x[1:(samples),"Gene"] <-A
melted_set_x[(samples+1):(2*samples),"Gene"] <-B
melted_set_x[is.na(melted_set_x$Gene),"Gene"] <- as.character(melted_set_x[is.na(melted_set_x$Gene),"Clone"])
melted_set_x$Group2 <- paste(melted_set_x$Sample,melted_set_x$Gene,sep=" ")
melted_set_x$Gene_pair <- paste(A,B,sep=" ")
return(melted_set_x)
}
out<-do.call(rbind,list(gene_pair_summmary(A="DNMT3A",B="IDH1"),
#gene_pair_summmary(A="DNMT3A",B="IDH2"),
gene_pair_summmary(A="NPM1",B="FLT3"),
gene_pair_summmary(A="NPM1",B="NRAS")))
dim(out)
head(out)
table(out$Gene_pair)
table(out$Gene_pair,out$Sample)
out%>%group_by(Gene_pair)%>%distinct(Sample)
out%>%group_by(Gene_pair)%>%distinct(Sample)%>%tally()
shiny::runApp('Projects/scDNA/scDNA_myeloid/shiny/scDNA_myeloid_shiny')
library(shiny)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(cowplot)
library(igraph)
library(pals)
library(UpSetR)
options(stringsAsFactors = FALSE)
#Nayla's WD
#setwd("/Users/naylaboorady/Desktop/MSK/scDNA_myeloid/shiny/scDNA_myeloid_shiny")
#Bobby's WD
setwd("/Users/bowmanr/Projects/scDNA/scDNA_myeloid/shiny/scDNA_myeloid_shiny/")
# SAMPLE CLONALITY DATA ====
test<-read.csv("data/for_NB.csv")
test$Final_group<- factor(test$Final_group,levels=c("CH","MPN","Signaling","DTAI","DTAI-RAS","DTAI-FLT3","DTAI-FLT3-RAS"))
# Number of mutations
gg_number_of_mutations<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations),
sd = sd(Number_of_mutations),
sem = sd(Number_of_mutations)/
sqrt(length(Number_of_mutations))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,9), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Number of clones
gg_number_of_clones<-ggplot(test,aes(y=Number_of_clones,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Number of clones")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Shannon diversity index
gg_shannon<-ggplot(test,aes(y=Shannon,x=Final_group,fill=Final_group))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Shannon diveristy index")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
# Number of mutations in each cohort
gg_Number_of_mutations_in_Dclone<-ggplot(test%>%group_by(Final_group)%>%
summarise(mean=mean(Number_of_mutations_in_dominant_clone),
sd = sd(Number_of_mutations_in_dominant_clone),
sem = sd(Number_of_mutations_in_dominant_clone)/
sqrt(length(Number_of_mutations_in_dominant_clone))),
aes(x=Final_group,y=mean,fill=Final_group))+
geom_bar(stat="identity",color="black")+
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),width=0.5,lwd=0.5)+
theme_classic(base_size = 16)+
ylab("Number of mutations \n in dominant clone")+xlab("")+ggtitle("")+
scale_y_continuous(limits = c(0,4.5), expand = c(0, 0)) +
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",
aesthetics = "fill",guide=FALSE)
# Dominant clone size
gg_dominant_clone_size_function <- function(selected_group){
gg_dominant_clone_size<-ggplot(test,
aes(y=Dominant_clone_size,x=get(selected_group),fill=get(selected_group)))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(width = 0.1,size=0.5)+
theme_classic(base_size = 16)+
ylab("Fraction of sample \n in dominant clone")+
xlab("")+
theme(axis.text.x = element_text(angle=30,hjust=1)) +
scale_fill_brewer(type="seq",palette = "Reds",aesthetics = "fill",guide=FALSE)
return(gg_dominant_clone_size)
}
#gg_number_of_mutations$mapping
# CLONOGRAPH DATA ====
final_sample_summary<-readRDS(file="data/final_sample_summary.rds")
clone_mutations<-readRDS(file="data/clone_mutations.rds")
sample_mutations <-readRDS(file="data/sample_mutations_with_pheno.rds")
sample_list <-final_sample_summary
# Generate clonal abundance barplot
gg_clonograph <- function(sample) {
# Extract out the sample of interest
clonal_abundance <-sample_list[[sample]]$Clones
clonal_architecture <-sample_list[[sample]]$Architecture
# Ensure the order of the clone abundance and clone architecture are the same.
clonal_architecture$Clone <- factor(clonal_architecture$Clone, levels=rev(clonal_abundance$Clone))
clonal_abundance$Clone <- factor(clonal_abundance$Clone, levels=levels(clonal_architecture$Clone))
gg_clonal_barplot<-ggplot(data=clonal_abundance, aes(x=Clone, y=Count,fill=Count)) +
geom_col()+
ggtitle(sample)+
theme_classic(base_size=12)+
scale_y_continuous(expand=c(0.01,0))+
#ylim() +
ylab("Cell Count")+
geom_errorbar(aes(ymin = LCI, ymax = UCI), width = 0.2)+
scale_fill_distiller(name = "Value", palette = "Reds", direction = 1) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x =element_blank(),
legend.position = "none",
plot.title = element_text(hjust=0.5,size=16),
plot.margin=unit(c(0,0,0,0),"cm"))
gg_heatmap<-ggplot(data=clonal_architecture,
aes(x=Clone, y=Mutant, fill=Genotype))+
geom_tile() +
scale_fill_manual(values=c("WT"=brewer.pal(7,"Reds")[1],
"Heterozygous"=brewer.pal(7,"Reds")[3],
"Homozygous"=brewer.pal(7,"Reds")[6],
"Unknown"="grey50"),name="Genotype")+
theme_classic(base_size=12) +
ylab("Mutation")+
scale_y_discrete(limits = rev(levels(clonal_architecture$Mutant)))+
theme(legend.position = "right", legend.direction = "vertical",
axis.text.x = element_blank(),
axis.line=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
plot.margin=unit(c(0,0,0,0),"cm"))
return(plot_grid(gg_clonal_barplot,gg_heatmap,ncol=1,align="v",axis="lr",rel_heights=c(1,0.75)))
}
gg_clonograph_multiplot<-function(sample){
graphs <- lapply(sample,gg_clonograph)
grobs <- lapply(graphs,as_grob)
return(plot_grid(plotlist = grobs,ncol=2,align="v",axis="lr"))
}
# NETWORK GRAPH ====
network_graph<-function(genes_of_interest,disease,multi_mutant_only){
# Subset data.frame above to only the dominant clones
dominant_clone_mutations <- clone_mutations%>%filter(Clonality=="Dominant")
# For each sample, determine if the dominant clone
sample_mutations$Match<-ifelse(sapply(sample_mutations$Sample,function(sample) {
all(sample_mutations%>%
filter(Sample==sample)%>%
select(all_of(genes_of_interest))==
dominant_clone_mutations%>%
filter(Sample==sample)%>%
select(all_of(genes_of_interest)))
}) ,"Match","Absent")
# identify sample with at least 2 DTAI mutationss
multi_mutant<-sample_mutations%>%
filter(grepl(`disease`,Dx))%>%
mutate(mutations = rowSums(select(., all_of(genes_of_interest))))%>%
filter(mutations>=2)%>%
distinct(Sample)%>%pull(Sample)
if(length(multi_mutant)<2){
return(print("No patients Identified"))
}
# Identify dominant clones
dominant_clones_of_interest<-clone_mutations%>%filter(Sample%in%multi_mutant)%>%
filter(Clonality=="Dominant")%>%
select(Clone,Clone_size,Sample,all_of(genes_of_interest))%>%
pivot_longer(cols=all_of(genes_of_interest),
names_to="Gene",values_to="Mutated")%>%
filter(Mutated==1)
# Now we want to know which variants are in the dominant clone, and the size of that clone.
# I'm sure there is a nice way to do this in dplyr, grouping on sample, but I couldn't figure it out
# so we will use lapply.
genes_in_each_dominant_clone<- do.call(rbind,setNames(lapply(multi_mutant,function(x){
# Extract the genes
dominant_variants<- dominant_clones_of_interest%>%filter(Sample==x)%>%pull(Gene)
# Extract the clone size
dominant_clone_size<- dominant_clones_of_interest%>%filter(Sample==x)%>%pull(Clone_size)
# if there are more than two DTAI variants in the dominant clone make a combinatorial edgelist
if(length(dominant_variants)>=2){
return(setNames(data.frame(t(combn(dominant_variants,2)),dominant_clone_size[1],"Dominant"),c("to","from","size","Clonality")))}
# if there is only 1 mutant in the dominant clone, list it for now so we can count the mutation,
# but we will eventually filter it out
else if(length(dominant_variants)==1){
return(setNames(data.frame(t(c(dominant_variants,dominant_variants)),dominant_clone_size,"Subclone"),c("to","from","size","Clonality")))}
# if no DTAI mutants in the dominant clone, ignore.
else if(length(dominant_variants)==0){
NULL
}
}),multi_mutant))%>%distinct()
# Now we will go for a similar process with subclones.
sub_clones_of_interest<-clone_mutations%>%filter(Sample%in%multi_mutant)%>%
filter(Clonality!="Dominant")%>%
select(Clone,Clone_size,Sample,all_of(genes_of_interest))%>%
pivot_longer(cols=all_of(genes_of_interest),
names_to="Gene",values_to="Mutated")%>%
filter(Mutated==1)%>%
# This is how we specifically select multi mutant subclone
group_by(Clone,Sample)%>%
add_tally()%>%filter(n>1)%>%
ungroup()
# Same process as above, but note that we decided to only plot the largest multi mutant clone.
# Try getting rid of this and seeing how it looks.
genes_in_each_subclone <- do.call(rbind,setNames(lapply(multi_mutant,function(x){
subclone_variants <- sub_clones_of_interest%>%filter(Sample==x)%>%
filter(Clone_size==max(Clone_size))%>%
pull(Gene)
subclone_size <- sub_clones_of_interest%>%filter(Sample==x)%>%
filter(Clone_size==max(Clone_size))%>%
pull(Clone_size)
if(length(subclone_variants)>=2){
return(setNames(data.frame(t(combn(rev(subclone_variants),2)),subclone_size[1],"Subclone"),c("to","from","size","Clonality")))}
else if(length(subclone_variants)==1){
return(setNames(data.frame(t(c(subclone_variants,subclone_variants)),subclone_size[1],"Subclone"),c("to","from","size","Clonality")))}
else if(length(subclone_variants)==0){
NULL
}
}),multi_mutant))%>%distinct()
# Now bind these two dataframe together
final_set<- rbind(genes_in_each_dominant_clone,genes_in_each_subclone)
# And remove the edges that are self referencing. We preserve the input variable so we can represent
# the vertex size in relation to total mutation burden in this subset of patients.
final_set_filtered <-final_set%>%filter(to!=from)
graph<-graph_from_data_frame(final_set_filtered,directed=F)%>%
set_edge_attr("weight", value = as.numeric(final_set_filtered%>%pull(size))*3) %>%
set_edge_attr("color", value = ifelse(final_set_filtered%>%
pull(Clonality)=="Dominant",
alpha(brewer.pal(5,"Reds")[5],0.5),
alpha("grey20",0.5)))
mutant_counts<-table(c(as.character(final_set$to),as.character(final_set$from)))[names(V(graph))]
scaled_mutant_counts <-mutant_counts/sum(mutant_counts)*50
radian.rescale <- function(x, start=0, direction=1) {
c.rotate <- function(x) (x + start) %% (2 * pi) * direction
c.rotate(scales::rescale(x, c(0, 2 * pi), range(x)))
}
lab.locs <- radian.rescale(x=1:length(genes_of_interest), direction=-1, start=length(genes_of_interest))
#lab.locs[1]<- 0
plot.igraph(graph,
edge.width = E(graph)$weight,
vertex.color=kelly(n=1+length(genes_of_interest))[-1],#brewer.pal(5,"Reds")[5],
vertex.frame.color="black",
vertex.size=scaled_mutant_counts[names(V(graph))],
vertex.label.family="Arial",
vertex.label.font=2,
vertex.label.color="black",
#   vertex.label.degree=lab.locs,
vertex.label.dist=rep(3,length(genes_of_interest)),
layout=layout_with_graphopt)
legend(x=1.5,y=1,legend=names(V(graph)),
col=kelly(n=1+length(names(V(graph))))[-1],
bty = "n", pch=20 ,
pt.cex = 2,
cex =0.75,
text.font=2,
text.col=kelly(n=1+length(names(V(graph))))[-1],
horiz = FALSE,
ncol=2#,
# inset = c(0.1, 0.1)
)
}
#SERVER ====
shinyServer(function(input,output,session) {
plotCount <- reactive({
as.numeric(length(input$clonoInput))
})
plotHeight <- reactive({ifelse(plotCount()==1,400,400 * round(plotCount()/2))})
plotWidth  <- reactive({ifelse(plotCount()==1,500,1000)})
output$sampleClonPlot <- renderPlot(switch(input$sc, oneC = gg_number_of_mutations,
oneE = gg_number_of_clones,
twoA = gg_shannon,
twoB = gg_Number_of_mutations_in_Dclone,
threeA = gg_dominant_clone_size_function(input$selected_group)
))
output$clonalBarplot <- renderPlot(  if(plotCount()==1){
gg_clonograph(input$clonoInput)
}
else if(plotCount()>1&plotCount()<7){
gg_clonograph_multiplot(input$clonoInput)
}
)
output$plot.ui <- renderUI({
plotOutput("clonalBarplot", height = plotHeight(),
width = plotWidth())
})
output$networkPlot <- renderPlot(network_graph(input$networkInput,disease = "AML")
)
#downloads
# output$downloadSampleClonPlot <- downloadHandler(
#                 filename =  function() {
#                   paste("iris", input$var3, sep=".")
#                 },
#                 # content is a function with argument file. content writes the plot to the device
#                 content = function(file) {
#                   if(input$var3 == "png")
#                     png(file) # open the png device
#                   else
#                     pdf(file) # open the pdf device
#                     switch(input$sc, oneC = gg_number_of_mutations,
#                          oneE = gg_number_of_clones,
#                          twoA = gg_shannon,
#                          twoB = gg_Number_of_mutations_in_Dclone,
#                          threeA = gg_dominant_clone_size_function(input$selected_group))
#                     dev.off()  # turn the device off
#
#                 }
# )
#
# output$downloadClonograph <- downloadHandler(
#                 filename =  function() {
#                   paste("iris", input$var3, sep=".")
#                 },
#                 # content is a function with argument file. content writes the plot to the device
#                 content = function(file) {
#                   if(input$var3 == "png")
#                     png(file) # open the png device
#                   else
#                     pdf(file) # open the pdf device
#                       if(plotCount()==1){
#                         gg_clonograph(input$clonoInput)
#                       }
#                       else if(plotCount()>1&plotCount()<7){
#                         gg_clonograph_multiplot(input$clonoInput)
#                       }
#                   dev.off()  # turn the device off
#
#                 }
# )
# output$downloadNetworkGraph <- downloadHandler(
#                 filename =  function() {
#                   paste("iris", input$var3, sep=".")
#                 },
#                 # content is a function with argument file. content writes the plot to the device
#                 content = function(file) {
#                   if(input$var3 == "png")
#                     png(file) # open the png device
#                   else
#                     pdf(file) # open the pdf device
#                     network_graph(input$networkInput,disease = "AML")
#                   dev.off()  # turn the device off
#
#                 }
# )
})
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
?plot.igraph
runApp()
runApp()
runApp()
runApp()
?plot.igraph
runApp()
?plotOutput
?fluidRow
runApp()
runApp()
