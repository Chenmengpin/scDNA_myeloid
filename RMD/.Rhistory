y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
z <-data.frame(t(apply(y%>%select(-Clone),1,function(p){
quantile(p,probs=c(0.025,0.975))
})),"Clone"=y$Clone)
set<-setNames(data.frame(inner_join(data.frame(clonal_abundance[[sample_to_test]]),z,by="Clone")),
c("Count","Clone","LCI","UCI"))%>%filter(LCI>=clone_cutoff)
})
sample_to_test <- "MSK15"
sample_to_test
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
test
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")
setNames(lapply(test,data.frame),1:replicates)
รงรง
head(test)
test
dim(test)
clonal_abundance_boot_CI <- lapply(names(NGT_to_clone),function(sample_to_test){
print(sample_to_test)
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
if(class(test)=="list"){
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
if(class(test)=="array"){
y <- setNames(apply(test,3,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
quantile(p,probs=c(0.025,0.975))
})),"Clone"=y$Clone)
print(sample_to_test)
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
if(class(test)=="list"){
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
if(class(test)=="array"){
y <- setNames(apply(test,3,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
clonal_abundance_boot_CI <- lapply(names(NGT_to_clone),function(sample_to_test){
print(sample_to_test)
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
if(class(test)=="list"){
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
if(class(test)=="array"){
y <- setNames(apply(test,3,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
z <-data.frame(t(apply(y%>%select(-Clone),1,function(p){
quantile(p,probs=c(0.025,0.975))
})),"Clone"=y$Clone)
set<-setNames(data.frame(inner_join(data.frame(clonal_abundance[[sample_to_test]]),z,by="Clone")),
c("Count","Clone","LCI","UCI"))%>%filter(LCI>=clone_cutoff)
})
clonal_abundance_boot_CI <- lapply(names(NGT_to_clone),function(sample_to_test){
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
if(class(test)=="list"){
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
if(class(test)=="array"){
y <- setNames(apply(test,3,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
z <- data.frame(t(apply(y%>%select(-Clone),1,function(p){
quantile(p,probs=c(0.025,0.975))
})),"Clone"=y$Clone)
set <- setNames(data.frame(inner_join(data.frame(clonal_abundance[[sample_to_test]]),z,by="Clone")),
c("Count","Clone","LCI","UCI"))%>%filter(LCI>=clone_cutoff)
})
clonal_abundance_boot_CI
clonal_abundance_boot_CI[[1]]
names(clonal_abundance_boot_CI)
clonal_abundance
names(clonal_abundance)
names(clonal_abundance_boot_CI) <-names(clonal_abundance)
print(sample_to_test)
if(nrow(clonal_abundance_boot_CI[[sample_to_test]])==0) {return("No clones after boostrapping")}
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
clonal_abundance_boot_CI[[sample_to_test]][,"Clone"]
options(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"])
clonal_abundance_boot_CI[[sample_to_test]]
clonal_abundance_boot_CI <- lapply(names(NGT_to_clone),function(sample_to_test){
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
if(class(test)=="list"){
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
if(class(test)=="array"){
y <- setNames(apply(test,3,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
z <- data.frame(t(apply(y%>%select(-Clone),1,function(p){
quantile(p,probs=c(0.025,0.975))
})),"Clone"=y$Clone)
set <- setNames(data.frame(inner_join(data.frame(clonal_abundance[[sample_to_test]]),z,by="Clone")),
c("Clone","Count","LCI","UCI"))%>%filter(LCI>=clone_cutoff)
})
names(clonal_abundance_boot_CI) <-names(clonal_abundance)
print(sample_to_test)
if(nrow(clonal_abundance_boot_CI[[sample_to_test]])==0) {
return("No clones after boostrapping")
}
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
clone_matrix
?as.matrix
cols_to_remove<-which(colSums(dedup_NGT)=="0")
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
cols_to_remove<-which(colSums(clone_matrix)==0)
print(cols_to_remove)
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
cols_to_remove<-which(colSums(clone_matrix)==0)
print(cols_to_remove)
variants_to_remove<-which(colSums(clone_matrix)==0)
print(variants_to_remove)
lapply(clonal_abundance_boot_CI,dim)
cclonal_abundance_boot_CI
clonal_abundance_boot_CI[]
variants_to_remove<-which(colSums(clone_matrix)==1)
print(variants_to_remove)
variants_to_remove
colSums(clone_matrix)
variants_to_remove<-which(colSums(clone_matrix)==2)
print(variants_to_remove)
NGT_to_clone[[sample_to_test]]
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-which(colSums(clone_matrix)==2)
print(variants_to_remove)
variants_to_remove
variants_to_remove<-names(which(colSums(clone_matrix)==2))
variants_to_remove
print(variants_to_remove)
length(setdiff(colnames(clone_matrix),c(variants_to_remove)))
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-names(which(colSums(clone_matrix)==2))
print(variants_to_remove)
## Check other conditions of interest that might remove sample from further processing
if(nrow(clone_matrix)==1) {
return("Only 1 clone left")
}else  if(length(setdiff(colnames(clone_matrix),c(variants_to_remove)))<=1){
return("Removed all but 1 variant")
}
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-names(which(colSums(clone_matrix)==2))
print(variants_to_remove)
## Check other conditions of interest that might remove sample from further processing
if(nrow(clone_matrix)==1) {
print("Only 1 clone left")
}else  if(length(setdiff(colnames(clone_matrix),c(variants_to_remove)))<=1){
print("Removed all but 1 variant")
}
variants_to_remove
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)
NGT_to_clone_subset
NGT_to_clone_subset <- NGT_to_clone_subset[,-variants_to_remove]
NGT_to_clone_subset
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)%>%
select(!variants_to_remove)
head(NGT_to_clone_subset)
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)%>%
select(!`variants_to_remove`)
head(NGT_to_clone_subset)
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-names(which(colSums(clone_matrix)==0))
print(variants_to_remove)
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)%>%
select(!`variants_to_remove`)
NGT_to_clone_subset
new_clones <- apply(clone_matrix%>%select(!variants_to_remove),2,paste0,sep="_")
new_clones <- apply(data.frame(clone_matrix)%>%select(!variants_to_remove),2,paste0,sep="_")
new_clones
new_clones <- apply(data.frame(clone_matrix)%>%select(!variants_to_remove),2,paste0,sep="_",collapse="_")
new_clones
clone_matrix
new_clones <- apply(data.frame(clone_matrix)%>%select(!variants_to_remove),2,function(x){
paste(x,sep="_",collapse="_")})
new_clones
new_clones <- apply(data.frame(clone_matrix)%>%select(!variants_to_remove),1,function(x){
paste(x,sep="_",collapse="_")})
new_clones
clone_key <- data.frame("New"=apply(data.frame(clone_matrix)%>%select(!variants_to_remove),margin=1,
function(x){ paste(x,sep="_",collapse="_")}),
"Old"=apply(data.frame(clone_matrix),margin=1,
function(x){ paste(x,sep="_",collapse="_")}))
?apply
clone_key <- data.frame("New"=apply(data.frame(clone_matrix)%>%select(!variants_to_remove),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}),
"Old"=apply(data.frame(clone_matrix),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}))
clone_key
clone_key$New==clone_key$Old
NGT_to_clone_subset$Clone <- sapply(NGT_to_clone_subset$Clone,function(x){
clone_key$New[match(x,clone_key$Old)]})
NGT_to_clone_subset
clonally_filtered_NGTs <- setNames(lapply(names(clonal_abundance_boot_CI),function(sample_to_test){
## Determine if there are any clones left to process
if(nrow(clonal_abundance_boot_CI[[sample_to_test]])==0) {
return("No clones after boostrapping")
}
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-names(which(colSums(clone_matrix)==0))
print(variants_to_remove)
## Check other conditions of interest that might remove sample from further processing
if(nrow(clone_matrix)==1) {
return("Only 1 clone left")
}else  if(length(setdiff(colnames(clone_matrix),c(variants_to_remove)))<=1){
return("Removed all but 1 variant")
}else {
# Select only clones that survive the bootstrapping, and remove variants that fall out
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)%>%
select(!`variants_to_remove`)
#Create a key for the new and old clone names after removing variants that are no longer present
clone_key <- data.frame("New"=apply(data.frame(clone_matrix)%>%select(!variants_to_remove),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}),
"Old"=apply(data.frame(clone_matrix),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}))
#If there are any variants to remove and clones that need to be renamed
if(any(clone_key$New!=clone_key$Old)){
NGT_to_clone_subset$Clone <- sapply(NGT_to_clone_subset$Clone,function(x){
clone_key$New[match(x,clone_key$Old)]})
}
return(NGT_to_clone_subset)
}
}),names(clonal_abundance_boot_CI))
#Select samples with at least 2 mutations
clonal_sample_set <- names(final_NGTs)[do.call(rbind,lapply(final_NGTs,dim))[,2]>2]
#Order columns based on computed_VAF, and assign a clone to each cell
NGT_to_clone<-lapply(final_NGTs[clonal_sample_set],function(y){
bulk_VAF_order <-names(sort(colSums(y[,-1]),decreasing=TRUE))
y[,c("Cell",bulk_VAF_order)] %>%unite("Clone",`bulk_VAF_order`,sep="_",, remove = FALSE)
})
#Tally clones
clonal_abundance<- lapply(NGT_to_clone,function(x){
x%>%count(Clone,name="Count")%>%arrange(Count)
})
# Setup a resampling function to generate multiple clonal abundance tallies
resample_fun<-function(data){
x <- data[sample(x=1:nrow(data),replace=TRUE),]
return(as.matrix(x%>%count(Clone,name="Count")%>%arrange(Count)))
}
replicates <- 100 # we did 10,000. Keeping it low here for run time.
clone_cutoff <- 10 # minimum number of cells to keep a clone
clonal_abundance_boot_CI <- lapply(names(NGT_to_clone),function(sample_to_test){
test<-replicate(n=replicates,resample_fun(NGT_to_clone[[sample_to_test]]),simplify = "array")
if(class(test)=="list"){
y <- setNames(lapply(test,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
if(class(test)=="array"){
y <- setNames(apply(test,3,data.frame),1:replicates) %>%
imap(.x = ., ~ set_names(.x, c("Clone", .y))) %>%
purrr::reduce(full_join, by = "Clone")%>%
mutate_if(names(.)!="Clone",as.numeric)%>%
mutate_each(funs(replace(., is.na(.), 0)))
}
z <- data.frame(t(apply(y%>%select(-Clone),1,function(p){
quantile(p,probs=c(0.025,0.975))
})),"Clone"=y$Clone)
set <- setNames(data.frame(inner_join(data.frame(clonal_abundance[[sample_to_test]]),z,by="Clone")),
c("Clone","Count","LCI","UCI"))%>%filter(LCI>=clone_cutoff)
})
names(clonal_abundance_boot_CI) <-names(clonal_abundance)
clonally_filtered_NGTs <- setNames(lapply(names(clonal_abundance_boot_CI),function(sample_to_test){
## Determine if there are any clones left to process
if(nrow(clonal_abundance_boot_CI[[sample_to_test]])==0) {
return("No clones after boostrapping")
}
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-names(which(colSums(clone_matrix)==0))
print(variants_to_remove)
## Check other conditions of interest that might remove sample from further processing
if(nrow(clone_matrix)==1) {
return("Only 1 clone left")
}else  if(length(setdiff(colnames(clone_matrix),c(variants_to_remove)))<=1){
return("Removed all but 1 variant")
}else {
# Select only clones that survive the bootstrapping, and remove variants that fall out
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)%>%
select(!`variants_to_remove`)
#Create a key for the new and old clone names after removing variants that are no longer present
clone_key <- data.frame("New"=apply(data.frame(clone_matrix)%>%select(!variants_to_remove),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}),
"Old"=apply(data.frame(clone_matrix),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}))
#If there are any variants to remove and clones that need to be renamed
if(any(clone_key$New!=clone_key$Old)){
NGT_to_clone_subset$Clone <- sapply(NGT_to_clone_subset$Clone,function(x){
clone_key$New[match(x,clone_key$Old)]})
}
return(NGT_to_clone_subset)
}
}),names(clonal_abundance_boot_CI))
clone_filtered_NGTs <- setNames(lapply(names(clonal_abundance_boot_CI),function(sample_to_test){
## Determine if there are any clones left to process
if(nrow(clonal_abundance_boot_CI[[sample_to_test]])==0) {
return("No clones after boostrapping")
}
## Determine if there are any mutations that are no longer found in a stable clone
clone_matrix<-as.matrix(do.call(rbind,
strsplit(clonal_abundance_boot_CI[[sample_to_test]][,"Clone"],
split="_")))
mode(clone_matrix) <- "numeric"
colnames(clone_matrix) <-colnames(NGT_to_clone[[sample_to_test]])[-c(1,2)]
variants_to_remove<-names(which(colSums(clone_matrix)==0))
print(variants_to_remove)
## Check other conditions of interest that might remove sample from further processing
if(nrow(clone_matrix)==1) {
return("Only 1 clone left")
}else  if(length(setdiff(colnames(clone_matrix),c(variants_to_remove)))<=1){
return("Removed all but 1 variant")
}else {
# Select only clones that survive the bootstrapping, and remove variants that fall out
NGT_to_clone_subset <- NGT_to_clone[[sample_to_test]]%>%
filter(Clone%in%clonal_abundance_boot_CI[[sample_to_test]]$Clone)%>%
select(!`variants_to_remove`)
#Create a key for the new and old clone names after removing variants that are no longer present
clone_key <- data.frame("New"=apply(data.frame(clone_matrix)%>%select(!variants_to_remove),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}),
"Old"=apply(data.frame(clone_matrix),MARGIN=1,
function(x){ paste(x,sep="_",collapse="_")}))
#If there are any variants to remove and clones that need to be renamed
if(any(clone_key$New!=clone_key$Old)){
NGT_to_clone_subset$Clone <- sapply(NGT_to_clone_subset$Clone,function(x){
clone_key$New[match(x,clone_key$Old)]})
}
return(NGT_to_clone_subset)
}
}),names(clonal_abundance_boot_CI))
clone_filtered_NGTs[[sample_to_test]]%>%disinct()
clone_filtered_NGTs[[sample_to_test]]%>%distinct()
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%select(!Cell)%>%distinct()
clonal_architecture
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer("Clone","Mutant","Genotype")
clonal_architecture
clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()
clonal_architecture
clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()
clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer("Clone","Mutant")
pivot_longer()
?pivot_longer
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone)
clonal_architecture
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to=c("Clone","Mutant","Genotype"))
clonal_architecture
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to=c("Clone","Mutant"))
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to="Mutant",values_to="Genotype")
clonal_architecture
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to="Mutant",values_to="Genotype")%>%
transmute(Genotype,ifelse(Genotype==3,NA,
ifelse(Genotype==0,"WT",
ifelse(Genotype==1,"Heterozygous",                                                                                   ifelse(Genotype==2,"Homozygous",NA)))))
clonal_architecture
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to="Mutant",values_to="Genotype")%>%
mutate(Genotype,ifelse(Genotype==3,NA,
ifelse(Genotype==0,"WT",
ifelse(Genotype==1,"Heterozygous",                                                                                   ifelse(Genotype==2,"Homozygous",NA)))))
clonal_architecture
?mutate
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to="Mutant",values_to="Genotype")%>%
mutate(Genotype=ifelse(Genotype==3,NA,
ifelse(Genotype==0,"WT",
ifelse(Genotype==1,"Heterozygous",                                                                                   ifelse(Genotype==2,"Homozygous",NA)))))
clonal_architecture
clonal_architecture <- setNames(lapply(names(clonal_abundance_boot_CI),function(sample_to_test){
clonal_architecture<-clone_filtered_NGTs[[sample_to_test]]%>%
select(!Cell)%>%
distinct()%>%
pivot_longer(cols=!Clone,names_to="Mutant",values_to="Genotype")%>%
mutate(Genotype=ifelse(Genotype==3,NA,
ifelse(Genotype==0,"WT",
ifelse(Genotype==1,"Heterozygous",                                                                                   ifelse(Genotype==2,"Homozygous",NA)))))
}), names(clonal_abundance_boot_CI))
```{r packages, cache=TRUE}
options(stringsAsFactors = FALSE)
library(VariantAnnotation)
library(plyranges)
library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
filtered_NGT<-setNames(lapply(names(SNV),function(sample){
setNames(data.frame(SNV[[sample]][,c("Cell",as.character(variants[[sample]]$SNV))]),
c("Cell",variants[[sample]]$AA))
}),names(SNV))
final_NGTs<-setNames(lapply(names(filtered_NGT),function(x){
filtered_NGT[[x]] %>%
select_if(~ !is.numeric(.) || sum(.%in%c(1,2))>=2) %>%
filter_all(all_vars(.!=3)) %>%
select_if(~ !is.numeric(.) || sum(.%in%c(1,2))>=2)
}),names(filtered_NGT))
